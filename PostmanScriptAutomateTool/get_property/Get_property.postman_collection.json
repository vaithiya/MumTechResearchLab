{
	"info": {
		"_postman_id": "3a9cbda4-d627-4425-8f1a-6f380f6ae8da",
		"name": "Get_property",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Local_Env",
			"item": [
				{
					"name": "ResponseValidation MandatoryCheck",
					"item": [
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.id whether null or not",
											"    pm.test(\"success response: client.id not null\", function() {",
											"    \tpm.expect(jsondata.client.id).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.id) {",
											"    \t//check the client.id whether empty or not",
											"    \tpm.test(\"success response: client.id not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.id.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.name whether null or not",
											"    pm.test(\"success response: client.name not null\", function() {",
											"    \tpm.expect(jsondata.client.name).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.name) {",
											"    \t//check the client.name whether empty or not",
											"    \tpm.test(\"success response: client.name not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.name.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.type whether null or not",
											"    pm.test(\"success response: client.type not null\", function() {",
											"    \tpm.expect(jsondata.client.type).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.type) {",
											"    \t//check the client.type whether empty or not",
											"    \tpm.test(\"success response: client.type not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.type.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.media_link whether null or not",
											"    pm.test(\"success response: client.media_link not null\", function() {",
											"    \tpm.expect(jsondata.client.media_link).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.media_link) {",
											"    \t//check the client.media_link whether empty or not",
											"    \tpm.test(\"success response: client.media_link not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.media_link.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.id whether null or not",
											"    pm.test(\"success response: crawl.id not null\", function() {",
											"    \tpm.expect(jsondata.crawl.id).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.id) {",
											"    \t//check the crawl.id whether empty or not",
											"    \tpm.test(\"success response: crawl.id not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.id.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.name whether null or not",
											"    pm.test(\"success response: crawl.name not null\", function() {",
											"    \tpm.expect(jsondata.crawl.name).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.name) {",
											"    \t//check the crawl.name whether empty or not",
											"    \tpm.test(\"success response: crawl.name not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.name.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.type whether null or not",
											"    pm.test(\"success response: crawl.type not null\", function() {",
											"    \tpm.expect(jsondata.crawl.type).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.type) {",
											"    \t//check the crawl.type whether empty or not",
											"    \tpm.test(\"success response: crawl.type not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.type.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.media_link whether null or not",
											"    pm.test(\"success response: crawl.media_link not null\", function() {",
											"    \tpm.expect(jsondata.crawl.media_link).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.media_link) {",
											"    \t//check the crawl.media_link whether empty or not",
											"    \tpm.test(\"success response: crawl.media_link not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.media_link.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ResponseValidation FormatCkeck",
					"item": [
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.id) {",
											"    \t//check the client.id whether number or string",
											"    \tpm.test(\"success response: client.id is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.id)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.name) {",
											"    \t//check the client.name whether number or string",
											"    \tpm.test(\"success response: client.name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.updated_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.updated_at) {",
											"    \t//check the client.updated_at whether number or string",
											"    \tpm.test(\"success response: client.updated_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.updated_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.update_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.update_user) {",
											"    \t//check the client.update_user whether number or string",
											"    \tpm.test(\"success response: client.update_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.update_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.created_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.created_at) {",
											"    \t//check the client.created_at whether number or string",
											"    \tpm.test(\"success response: client.created_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.created_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.create_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.create_user) {",
											"    \t//check the client.create_user whether number or string",
											"    \tpm.test(\"success response: client.create_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.create_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.delete_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.delete_flg) {",
											"    \t//check the client.delete_flg whether number or string",
											"    \tpm.test(\"success response: client.delete_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.delete_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.type) {",
											"    \t//check the client.type whether number or string",
											"    \tpm.test(\"success response: client.type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media) {",
											"    \t//check the client.media whether number or string",
											"    \tpm.test(\"success response: client.media is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media_text) {",
											"    \t//check the client.media_text whether number or string",
											"    \tpm.test(\"success response: client.media_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media_link) {",
											"    \t//check the client.media_link whether number or string",
											"    \tpm.test(\"success response: client.media_link is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media_link)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.published",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.published) {",
											"    \t//check the client.published whether number or string",
											"    \tpm.test(\"success response: client.published is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.published)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.new_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.new_flg) {",
											"    \t//check the client.new_flg whether number or string",
											"    \tpm.test(\"success response: client.new_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.new_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price) {",
											"    \t//check the client.price whether number or string",
											"    \tpm.test(\"success response: client.price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price_int",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price_int) {",
											"    \t//check the client.price_int whether number or string",
											"    \tpm.test(\"success response: client.price_int is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price_int)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.most_price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.most_price) {",
											"    \t//check the client.most_price whether number or string",
											"    \tpm.test(\"success response: client.most_price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.most_price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.address) {",
											"    \t//check the client.address whether number or string",
											"    \tpm.test(\"success response: client.address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.sale_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.sale_house_num) {",
											"    \t//check the client.sale_house_num whether number or string",
											"    \tpm.test(\"success response: client.sale_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.sale_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.total_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.total_house_num) {",
											"    \t//check the client.total_house_num whether number or string",
											"    \tpm.test(\"success response: client.total_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.total_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.access",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.access) {",
											"    \t//check the client.access whether number or string",
											"    \tpm.test(\"success response: client.access is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.access)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.access_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.access_time) {",
											"    \t//check the client.access_time whether number or string",
											"    \tpm.test(\"success response: client.access_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.access_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.madori",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.madori) {",
											"    \t//check the client.madori whether number or string",
											"    \tpm.test(\"success response: client.madori is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.madori)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.number_rooms",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.number_rooms) {",
											"    \t//check the client.number_rooms whether number or string",
											"    \tpm.test(\"success response: client.number_rooms is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.number_rooms)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.complete_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.complete_time) {",
											"    \t//check the client.complete_time whether number or string",
											"    \tpm.test(\"success response: client.complete_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.complete_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kouzou_kouhou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kouzou_kouhou) {",
											"    \t//check the client.kouzou_kouhou whether number or string",
											"    \tpm.test(\"success response: client.kouzou_kouhou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kouzou_kouhou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.image1",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.image1) {",
											"    \t//check the client.image1 whether number or string",
											"    \tpm.test(\"success response: client.image1 is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.image1)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setsubi",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setsubi) {",
											"    \t//check the client.setsubi whether number or string",
											"    \tpm.test(\"success response: client.setsubi is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setsubi)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.limitation",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.limitation) {",
											"    \t//check the client.limitation whether number or string",
											"    \tpm.test(\"success response: client.limitation is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.limitation)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.memo",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.memo) {",
											"    \t//check the client.memo whether number or string",
											"    \tpm.test(\"success response: client.memo is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.memo)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.shidoufutan",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.shidoufutan) {",
											"    \t//check the client.shidoufutan whether number or string",
											"    \tpm.test(\"success response: client.shidoufutan is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.shidoufutan)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.reform_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.reform_history) {",
											"    \t//check the client.reform_history whether number or string",
											"    \tpm.test(\"success response: client.reform_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.reform_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.renovation_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.renovation_history) {",
											"    \t//check the client.renovation_history whether number or string",
											"    \tpm.test(\"success response: client.renovation_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.renovation_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.parking",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.parking) {",
											"    \t//check the client.parking whether number or string",
											"    \tpm.test(\"success response: client.parking is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.parking)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_kouzou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_kouzou) {",
											"    \t//check the client.building_kouzou whether number or string",
											"    \tpm.test(\"success response: client.building_kouzou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_kouzou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.landright",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.landright) {",
											"    \t//check the client.landright whether number or string",
											"    \tpm.test(\"success response: client.landright is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.landright)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.landyouto",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.landyouto) {",
											"    \t//check the client.landyouto whether number or string",
											"    \tpm.test(\"success response: client.landyouto is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.landyouto)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setsudou_status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setsudou_status) {",
											"    \t//check the client.setsudou_status whether number or string",
											"    \tpm.test(\"success response: client.setsudou_status is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setsudou_status)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.coverage_ratio_floor_area_ratio",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.coverage_ratio_floor_area_ratio) {",
											"    \t//check the client.coverage_ratio_floor_area_ratio whether number or string",
											"    \tpm.test(\"success response: client.coverage_ratio_floor_area_ratio is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.coverage_ratio_floor_area_ratio)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.chimoku",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.chimoku) {",
											"    \t//check the client.chimoku whether number or string",
											"    \tpm.test(\"success response: client.chimoku is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.chimoku)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.chisei",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.chisei) {",
											"    \t//check the client.chisei whether number or string",
											"    \tpm.test(\"success response: client.chisei is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.chisei)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setback",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setback) {",
											"    \t//check the client.setback whether number or string",
											"    \tpm.test(\"success response: client.setback is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setback)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kenchiku_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kenchiku_number) {",
											"    \t//check the client.kenchiku_number whether number or string",
											"    \tpm.test(\"success response: client.kenchiku_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kenchiku_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.current_state",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.current_state) {",
											"    \t//check the client.current_state whether number or string",
											"    \tpm.test(\"success response: client.current_state is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.current_state)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.entering_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.entering_time) {",
											"    \t//check the client.entering_time whether number or string",
											"    \tpm.test(\"success response: client.entering_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.entering_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.store_name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.store_name) {",
											"    \t//check the client.store_name whether number or string",
											"    \tpm.test(\"success response: client.store_name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.store_name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.trade_aspect_type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.trade_aspect_type) {",
											"    \t//check the client.trade_aspect_type whether number or string",
											"    \tpm.test(\"success response: client.trade_aspect_type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.trade_aspect_type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.realestate_registration_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.realestate_registration_number) {",
											"    \t//check the client.realestate_registration_number whether number or string",
											"    \tpm.test(\"success response: client.realestate_registration_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.realestate_registration_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.store_address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.store_address) {",
											"    \t//check the client.store_address whether number or string",
											"    \tpm.test(\"success response: client.store_address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.store_address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.release_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.release_date) {",
											"    \t//check the client.release_date whether number or string",
											"    \tpm.test(\"success response: client.release_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.release_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.nextmodify_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.nextmodify_date) {",
											"    \t//check the client.nextmodify_date whether number or string",
											"    \tpm.test(\"success response: client.nextmodify_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.nextmodify_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.updated_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.updated_date) {",
											"    \t//check the client.updated_date whether number or string",
											"    \tpm.test(\"success response: client.updated_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.updated_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.all_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.all_text) {",
											"    \t//check the client.all_text whether number or string",
											"    \tpm.test(\"success response: client.all_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.all_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.new_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.new_label) {",
											"    \t//check the client.new_label whether number or string",
											"    \tpm.test(\"success response: client.new_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.new_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.status_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.status_label) {",
											"    \t//check the client.status_label whether number or string",
											"    \tpm.test(\"success response: client.status_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.status_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.status) {",
											"    \t//check the client.status whether number or string",
											"    \tpm.test(\"success response: client.status is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.status)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price_text) {",
											"    \t//check the client.price_text whether number or string",
											"    \tpm.test(\"success response: client.price_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.land_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.land_area) {",
											"    \t//check the client.land_area whether number or string",
											"    \tpm.test(\"success response: client.land_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.land_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.land_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.land_area_text) {",
											"    \t//check the client.land_area_text whether number or string",
											"    \tpm.test(\"success response: client.land_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.land_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_area) {",
											"    \t//check the client.building_area whether number or string",
											"    \tpm.test(\"success response: client.building_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_area_text) {",
											"    \t//check the client.building_area_text whether number or string",
											"    \tpm.test(\"success response: client.building_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kenpeiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kenpeiritsu_text) {",
											"    \t//check the client.kenpeiritsu_text whether number or string",
											"    \tpm.test(\"success response: client.kenpeiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kenpeiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.yosekiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.yosekiritsu_text) {",
											"    \t//check the client.yosekiritsu_text whether number or string",
											"    \tpm.test(\"success response: client.yosekiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.yosekiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.id) {",
											"    \t//check the crawl.id whether number or string",
											"    \tpm.test(\"success response: crawl.id is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.id)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.name) {",
											"    \t//check the crawl.name whether number or string",
											"    \tpm.test(\"success response: crawl.name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.updated_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.updated_at) {",
											"    \t//check the crawl.updated_at whether number or string",
											"    \tpm.test(\"success response: crawl.updated_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.updated_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.update_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.update_user) {",
											"    \t//check the crawl.update_user whether number or string",
											"    \tpm.test(\"success response: crawl.update_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.update_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.created_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.created_at) {",
											"    \t//check the crawl.created_at whether number or string",
											"    \tpm.test(\"success response: crawl.created_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.created_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.create_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.create_user) {",
											"    \t//check the crawl.create_user whether number or string",
											"    \tpm.test(\"success response: crawl.create_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.create_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.delete_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.delete_flg) {",
											"    \t//check the crawl.delete_flg whether number or string",
											"    \tpm.test(\"success response: crawl.delete_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.delete_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.type) {",
											"    \t//check the crawl.type whether number or string",
											"    \tpm.test(\"success response: crawl.type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media) {",
											"    \t//check the crawl.media whether number or string",
											"    \tpm.test(\"success response: crawl.media is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media_text) {",
											"    \t//check the crawl.media_text whether number or string",
											"    \tpm.test(\"success response: crawl.media_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media_link) {",
											"    \t//check the crawl.media_link whether number or string",
											"    \tpm.test(\"success response: crawl.media_link is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media_link)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.published",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.published) {",
											"    \t//check the crawl.published whether number or string",
											"    \tpm.test(\"success response: crawl.published is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.published)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.new_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.new_flg) {",
											"    \t//check the crawl.new_flg whether number or string",
											"    \tpm.test(\"success response: crawl.new_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.new_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price) {",
											"    \t//check the crawl.price whether number or string",
											"    \tpm.test(\"success response: crawl.price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price_int",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price_int) {",
											"    \t//check the crawl.price_int whether number or string",
											"    \tpm.test(\"success response: crawl.price_int is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price_int)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.most_price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.most_price) {",
											"    \t//check the crawl.most_price whether number or string",
											"    \tpm.test(\"success response: crawl.most_price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.most_price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.address) {",
											"    \t//check the crawl.address whether number or string",
											"    \tpm.test(\"success response: crawl.address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.sale_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.sale_house_num) {",
											"    \t//check the crawl.sale_house_num whether number or string",
											"    \tpm.test(\"success response: crawl.sale_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.sale_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.total_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.total_house_num) {",
											"    \t//check the crawl.total_house_num whether number or string",
											"    \tpm.test(\"success response: crawl.total_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.total_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.access",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.access) {",
											"    \t//check the crawl.access whether number or string",
											"    \tpm.test(\"success response: crawl.access is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.access)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.access_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.access_time) {",
											"    \t//check the crawl.access_time whether number or string",
											"    \tpm.test(\"success response: crawl.access_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.access_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.madori",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.madori) {",
											"    \t//check the crawl.madori whether number or string",
											"    \tpm.test(\"success response: crawl.madori is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.madori)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.number_rooms",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.number_rooms) {",
											"    \t//check the crawl.number_rooms whether number or string",
											"    \tpm.test(\"success response: crawl.number_rooms is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.number_rooms)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.complete_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.complete_time) {",
											"    \t//check the crawl.complete_time whether number or string",
											"    \tpm.test(\"success response: crawl.complete_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.complete_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kouzou_kouhou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kouzou_kouhou) {",
											"    \t//check the crawl.kouzou_kouhou whether number or string",
											"    \tpm.test(\"success response: crawl.kouzou_kouhou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kouzou_kouhou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.image1",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.image1) {",
											"    \t//check the crawl.image1 whether number or string",
											"    \tpm.test(\"success response: crawl.image1 is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.image1)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setsubi",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setsubi) {",
											"    \t//check the crawl.setsubi whether number or string",
											"    \tpm.test(\"success response: crawl.setsubi is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setsubi)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.limitation",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.limitation) {",
											"    \t//check the crawl.limitation whether number or string",
											"    \tpm.test(\"success response: crawl.limitation is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.limitation)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.memo",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.memo) {",
											"    \t//check the crawl.memo whether number or string",
											"    \tpm.test(\"success response: crawl.memo is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.memo)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.shidoufutan",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.shidoufutan) {",
											"    \t//check the crawl.shidoufutan whether number or string",
											"    \tpm.test(\"success response: crawl.shidoufutan is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.shidoufutan)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.reform_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.reform_history) {",
											"    \t//check the crawl.reform_history whether number or string",
											"    \tpm.test(\"success response: crawl.reform_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.reform_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.renovation_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.renovation_history) {",
											"    \t//check the crawl.renovation_history whether number or string",
											"    \tpm.test(\"success response: crawl.renovation_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.renovation_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.parking",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.parking) {",
											"    \t//check the crawl.parking whether number or string",
											"    \tpm.test(\"success response: crawl.parking is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.parking)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_kouzou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_kouzou) {",
											"    \t//check the crawl.building_kouzou whether number or string",
											"    \tpm.test(\"success response: crawl.building_kouzou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_kouzou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.landright",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.landright) {",
											"    \t//check the crawl.landright whether number or string",
											"    \tpm.test(\"success response: crawl.landright is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.landright)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.landyouto",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.landyouto) {",
											"    \t//check the crawl.landyouto whether number or string",
											"    \tpm.test(\"success response: crawl.landyouto is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.landyouto)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setsudou_status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setsudou_status) {",
											"    \t//check the crawl.setsudou_status whether number or string",
											"    \tpm.test(\"success response: crawl.setsudou_status is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setsudou_status)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.coverage_ratio_floor_area_ratio",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.coverage_ratio_floor_area_ratio) {",
											"    \t//check the crawl.coverage_ratio_floor_area_ratio whether number or string",
											"    \tpm.test(\"success response: crawl.coverage_ratio_floor_area_ratio is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.coverage_ratio_floor_area_ratio)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.chimoku",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.chimoku) {",
											"    \t//check the crawl.chimoku whether number or string",
											"    \tpm.test(\"success response: crawl.chimoku is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.chimoku)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.chisei",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.chisei) {",
											"    \t//check the crawl.chisei whether number or string",
											"    \tpm.test(\"success response: crawl.chisei is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.chisei)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setback",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setback) {",
											"    \t//check the crawl.setback whether number or string",
											"    \tpm.test(\"success response: crawl.setback is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setback)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kenchiku_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kenchiku_number) {",
											"    \t//check the crawl.kenchiku_number whether number or string",
											"    \tpm.test(\"success response: crawl.kenchiku_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kenchiku_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.current_state",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.current_state) {",
											"    \t//check the crawl.current_state whether number or string",
											"    \tpm.test(\"success response: crawl.current_state is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.current_state)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.entering_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.entering_time) {",
											"    \t//check the crawl.entering_time whether number or string",
											"    \tpm.test(\"success response: crawl.entering_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.entering_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.store_name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.store_name) {",
											"    \t//check the crawl.store_name whether number or string",
											"    \tpm.test(\"success response: crawl.store_name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.store_name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.trade_aspect_type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.trade_aspect_type) {",
											"    \t//check the crawl.trade_aspect_type whether number or string",
											"    \tpm.test(\"success response: crawl.trade_aspect_type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.trade_aspect_type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.realestate_registration_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.realestate_registration_number) {",
											"    \t//check the crawl.realestate_registration_number whether number or string",
											"    \tpm.test(\"success response: crawl.realestate_registration_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.realestate_registration_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.store_address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.store_address) {",
											"    \t//check the crawl.store_address whether number or string",
											"    \tpm.test(\"success response: crawl.store_address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.store_address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.release_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.release_date) {",
											"    \t//check the crawl.release_date whether number or string",
											"    \tpm.test(\"success response: crawl.release_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.release_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.nextmodify_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.nextmodify_date) {",
											"    \t//check the crawl.nextmodify_date whether number or string",
											"    \tpm.test(\"success response: crawl.nextmodify_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.nextmodify_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.updated_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.updated_date) {",
											"    \t//check the crawl.updated_date whether number or string",
											"    \tpm.test(\"success response: crawl.updated_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.updated_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.all_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.all_text) {",
											"    \t//check the crawl.all_text whether number or string",
											"    \tpm.test(\"success response: crawl.all_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.all_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.new_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.new_label) {",
											"    \t//check the crawl.new_label whether number or string",
											"    \tpm.test(\"success response: crawl.new_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.new_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.status_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.status_label) {",
											"    \t//check the crawl.status_label whether number or string",
											"    \tpm.test(\"success response: crawl.status_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.status_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.status) {",
											"    \t//check the crawl.status whether number or string",
											"    \tpm.test(\"success response: crawl.status is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.status)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price_text) {",
											"    \t//check the crawl.price_text whether number or string",
											"    \tpm.test(\"success response: crawl.price_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.land_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.land_area) {",
											"    \t//check the crawl.land_area whether number or string",
											"    \tpm.test(\"success response: crawl.land_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.land_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.land_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.land_area_text) {",
											"    \t//check the crawl.land_area_text whether number or string",
											"    \tpm.test(\"success response: crawl.land_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.land_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_area) {",
											"    \t//check the crawl.building_area whether number or string",
											"    \tpm.test(\"success response: crawl.building_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_area_text) {",
											"    \t//check the crawl.building_area_text whether number or string",
											"    \tpm.test(\"success response: crawl.building_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kenpeiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kenpeiritsu_text) {",
											"    \t//check the crawl.kenpeiritsu_text whether number or string",
											"    \tpm.test(\"success response: crawl.kenpeiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kenpeiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.yosekiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.yosekiritsu_text) {",
											"    \t//check the crawl.yosekiritsu_text whether number or string",
											"    \tpm.test(\"success response: crawl.yosekiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.yosekiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{LCLROOT}}property/{{ID_2}}",
									"host": [
										"{{LCLROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SuccessCase",
					"event": [
						{
							"script": {
								"id": 0,
								"type": "text/javascript",
								"exec": [
									"if (1 < request.data.length){",
									"    tests[\"RequestBody: \"+ request.data ] = true;",
									"} else {",
									"    tests[\"RequestBody: empty\" ] = true;",
									"}",
									"",
									"if (responseCode.code != 200) {",
									"    tests[\"Response: \" + responseBody] = false;",
									"    tests[\"response failed \"] = false;",
									"    ",
									"} else {",
									"    tests[\"Response: \" + responseBody] = true;",
									"    tests[\"response returned successfully\"] = true;",
									"}",
									"",
									"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LCLROOT}}property/{{ID_2}}",
							"host": [
								"{{LCLROOT}}property"
							],
							"path": [
								"{{ID_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test_Env",
			"item": [
				{
					"name": "ResponseValidation MandatoryCheck",
					"item": [
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.id whether null or not",
											"    pm.test(\"success response: client.id not null\", function() {",
											"    \tpm.expect(jsondata.client.id).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.id) {",
											"    \t//check the client.id whether empty or not",
											"    \tpm.test(\"success response: client.id not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.id.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.name whether null or not",
											"    pm.test(\"success response: client.name not null\", function() {",
											"    \tpm.expect(jsondata.client.name).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.name) {",
											"    \t//check the client.name whether empty or not",
											"    \tpm.test(\"success response: client.name not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.name.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.type whether null or not",
											"    pm.test(\"success response: client.type not null\", function() {",
											"    \tpm.expect(jsondata.client.type).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.type) {",
											"    \t//check the client.type whether empty or not",
											"    \tpm.test(\"success response: client.type not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.type.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: client.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the client.media_link whether null or not",
											"    pm.test(\"success response: client.media_link not null\", function() {",
											"    \tpm.expect(jsondata.client.media_link).not.equal(null);",
											"    });",
											"    if(null !== jsondata.client.media_link) {",
											"    \t//check the client.media_link whether empty or not",
											"    \tpm.test(\"success response: client.media_link not empty\", function() {",
											"    \t\tpm.expect(jsondata.client.media_link.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.id whether null or not",
											"    pm.test(\"success response: crawl.id not null\", function() {",
											"    \tpm.expect(jsondata.crawl.id).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.id) {",
											"    \t//check the crawl.id whether empty or not",
											"    \tpm.test(\"success response: crawl.id not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.id.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.name whether null or not",
											"    pm.test(\"success response: crawl.name not null\", function() {",
											"    \tpm.expect(jsondata.crawl.name).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.name) {",
											"    \t//check the crawl.name whether empty or not",
											"    \tpm.test(\"success response: crawl.name not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.name.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.type whether null or not",
											"    pm.test(\"success response: crawl.type not null\", function() {",
											"    \tpm.expect(jsondata.crawl.type).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.type) {",
											"    \t//check the crawl.type whether empty or not",
											"    \tpm.test(\"success response: crawl.type not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.type.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation MandatoryCheck: crawl.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    //check the crawl.media_link whether null or not",
											"    pm.test(\"success response: crawl.media_link not null\", function() {",
											"    \tpm.expect(jsondata.crawl.media_link).not.equal(null);",
											"    });",
											"    if(null !== jsondata.crawl.media_link) {",
											"    \t//check the crawl.media_link whether empty or not",
											"    \tpm.test(\"success response: crawl.media_link not empty\", function() {",
											"    \t\tpm.expect(jsondata.crawl.media_link.trim()).not.equal(\"\");",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ResponseValidation FormatCkeck",
					"item": [
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.id) {",
											"    \t//check the client.id whether number or string",
											"    \tpm.test(\"success response: client.id is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.id)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.name) {",
											"    \t//check the client.name whether number or string",
											"    \tpm.test(\"success response: client.name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.updated_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.updated_at) {",
											"    \t//check the client.updated_at whether number or string",
											"    \tpm.test(\"success response: client.updated_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.updated_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.update_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.update_user) {",
											"    \t//check the client.update_user whether number or string",
											"    \tpm.test(\"success response: client.update_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.update_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.created_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.created_at) {",
											"    \t//check the client.created_at whether number or string",
											"    \tpm.test(\"success response: client.created_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.created_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.create_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.create_user) {",
											"    \t//check the client.create_user whether number or string",
											"    \tpm.test(\"success response: client.create_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.create_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.delete_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.delete_flg) {",
											"    \t//check the client.delete_flg whether number or string",
											"    \tpm.test(\"success response: client.delete_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.delete_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.type) {",
											"    \t//check the client.type whether number or string",
											"    \tpm.test(\"success response: client.type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media) {",
											"    \t//check the client.media whether number or string",
											"    \tpm.test(\"success response: client.media is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media_text) {",
											"    \t//check the client.media_text whether number or string",
											"    \tpm.test(\"success response: client.media_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.media_link) {",
											"    \t//check the client.media_link whether number or string",
											"    \tpm.test(\"success response: client.media_link is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.media_link)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.published",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.published) {",
											"    \t//check the client.published whether number or string",
											"    \tpm.test(\"success response: client.published is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.published)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.new_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.new_flg) {",
											"    \t//check the client.new_flg whether number or string",
											"    \tpm.test(\"success response: client.new_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.new_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price) {",
											"    \t//check the client.price whether number or string",
											"    \tpm.test(\"success response: client.price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price_int",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price_int) {",
											"    \t//check the client.price_int whether number or string",
											"    \tpm.test(\"success response: client.price_int is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price_int)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.most_price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.most_price) {",
											"    \t//check the client.most_price whether number or string",
											"    \tpm.test(\"success response: client.most_price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.most_price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.address) {",
											"    \t//check the client.address whether number or string",
											"    \tpm.test(\"success response: client.address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.sale_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.sale_house_num) {",
											"    \t//check the client.sale_house_num whether number or string",
											"    \tpm.test(\"success response: client.sale_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.sale_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.total_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.total_house_num) {",
											"    \t//check the client.total_house_num whether number or string",
											"    \tpm.test(\"success response: client.total_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.total_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.access",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.access) {",
											"    \t//check the client.access whether number or string",
											"    \tpm.test(\"success response: client.access is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.access)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.access_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.access_time) {",
											"    \t//check the client.access_time whether number or string",
											"    \tpm.test(\"success response: client.access_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.access_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.madori",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.madori) {",
											"    \t//check the client.madori whether number or string",
											"    \tpm.test(\"success response: client.madori is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.madori)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.number_rooms",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.number_rooms) {",
											"    \t//check the client.number_rooms whether number or string",
											"    \tpm.test(\"success response: client.number_rooms is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.number_rooms)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.complete_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.complete_time) {",
											"    \t//check the client.complete_time whether number or string",
											"    \tpm.test(\"success response: client.complete_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.complete_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kouzou_kouhou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kouzou_kouhou) {",
											"    \t//check the client.kouzou_kouhou whether number or string",
											"    \tpm.test(\"success response: client.kouzou_kouhou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kouzou_kouhou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.image1",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.image1) {",
											"    \t//check the client.image1 whether number or string",
											"    \tpm.test(\"success response: client.image1 is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.image1)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setsubi",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setsubi) {",
											"    \t//check the client.setsubi whether number or string",
											"    \tpm.test(\"success response: client.setsubi is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setsubi)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.limitation",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.limitation) {",
											"    \t//check the client.limitation whether number or string",
											"    \tpm.test(\"success response: client.limitation is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.limitation)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.memo",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.memo) {",
											"    \t//check the client.memo whether number or string",
											"    \tpm.test(\"success response: client.memo is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.memo)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.shidoufutan",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.shidoufutan) {",
											"    \t//check the client.shidoufutan whether number or string",
											"    \tpm.test(\"success response: client.shidoufutan is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.shidoufutan)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.reform_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.reform_history) {",
											"    \t//check the client.reform_history whether number or string",
											"    \tpm.test(\"success response: client.reform_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.reform_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.renovation_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.renovation_history) {",
											"    \t//check the client.renovation_history whether number or string",
											"    \tpm.test(\"success response: client.renovation_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.renovation_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.parking",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.parking) {",
											"    \t//check the client.parking whether number or string",
											"    \tpm.test(\"success response: client.parking is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.parking)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_kouzou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_kouzou) {",
											"    \t//check the client.building_kouzou whether number or string",
											"    \tpm.test(\"success response: client.building_kouzou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_kouzou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.landright",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.landright) {",
											"    \t//check the client.landright whether number or string",
											"    \tpm.test(\"success response: client.landright is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.landright)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.landyouto",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.landyouto) {",
											"    \t//check the client.landyouto whether number or string",
											"    \tpm.test(\"success response: client.landyouto is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.landyouto)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setsudou_status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setsudou_status) {",
											"    \t//check the client.setsudou_status whether number or string",
											"    \tpm.test(\"success response: client.setsudou_status is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setsudou_status)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.coverage_ratio_floor_area_ratio",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.coverage_ratio_floor_area_ratio) {",
											"    \t//check the client.coverage_ratio_floor_area_ratio whether number or string",
											"    \tpm.test(\"success response: client.coverage_ratio_floor_area_ratio is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.coverage_ratio_floor_area_ratio)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.chimoku",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.chimoku) {",
											"    \t//check the client.chimoku whether number or string",
											"    \tpm.test(\"success response: client.chimoku is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.chimoku)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.chisei",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.chisei) {",
											"    \t//check the client.chisei whether number or string",
											"    \tpm.test(\"success response: client.chisei is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.chisei)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.setback",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.setback) {",
											"    \t//check the client.setback whether number or string",
											"    \tpm.test(\"success response: client.setback is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.setback)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kenchiku_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kenchiku_number) {",
											"    \t//check the client.kenchiku_number whether number or string",
											"    \tpm.test(\"success response: client.kenchiku_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kenchiku_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.current_state",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.current_state) {",
											"    \t//check the client.current_state whether number or string",
											"    \tpm.test(\"success response: client.current_state is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.current_state)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.entering_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.entering_time) {",
											"    \t//check the client.entering_time whether number or string",
											"    \tpm.test(\"success response: client.entering_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.entering_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.store_name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.store_name) {",
											"    \t//check the client.store_name whether number or string",
											"    \tpm.test(\"success response: client.store_name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.store_name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.trade_aspect_type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.trade_aspect_type) {",
											"    \t//check the client.trade_aspect_type whether number or string",
											"    \tpm.test(\"success response: client.trade_aspect_type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.trade_aspect_type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.realestate_registration_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.realestate_registration_number) {",
											"    \t//check the client.realestate_registration_number whether number or string",
											"    \tpm.test(\"success response: client.realestate_registration_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.realestate_registration_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.store_address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.store_address) {",
											"    \t//check the client.store_address whether number or string",
											"    \tpm.test(\"success response: client.store_address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.store_address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.release_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.release_date) {",
											"    \t//check the client.release_date whether number or string",
											"    \tpm.test(\"success response: client.release_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.release_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.nextmodify_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.nextmodify_date) {",
											"    \t//check the client.nextmodify_date whether number or string",
											"    \tpm.test(\"success response: client.nextmodify_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.nextmodify_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.updated_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.updated_date) {",
											"    \t//check the client.updated_date whether number or string",
											"    \tpm.test(\"success response: client.updated_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.updated_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.all_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.all_text) {",
											"    \t//check the client.all_text whether number or string",
											"    \tpm.test(\"success response: client.all_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.all_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.new_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.new_label) {",
											"    \t//check the client.new_label whether number or string",
											"    \tpm.test(\"success response: client.new_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.new_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.status_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.status_label) {",
											"    \t//check the client.status_label whether number or string",
											"    \tpm.test(\"success response: client.status_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.status_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.status) {",
											"    \t//check the client.status whether number or string",
											"    \tpm.test(\"success response: client.status is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.status)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.price_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.price_text) {",
											"    \t//check the client.price_text whether number or string",
											"    \tpm.test(\"success response: client.price_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.price_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.land_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.land_area) {",
											"    \t//check the client.land_area whether number or string",
											"    \tpm.test(\"success response: client.land_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.land_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.land_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.land_area_text) {",
											"    \t//check the client.land_area_text whether number or string",
											"    \tpm.test(\"success response: client.land_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.land_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_area) {",
											"    \t//check the client.building_area whether number or string",
											"    \tpm.test(\"success response: client.building_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.building_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.building_area_text) {",
											"    \t//check the client.building_area_text whether number or string",
											"    \tpm.test(\"success response: client.building_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.building_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.kenpeiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.kenpeiritsu_text) {",
											"    \t//check the client.kenpeiritsu_text whether number or string",
											"    \tpm.test(\"success response: client.kenpeiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.kenpeiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: client.yosekiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.client.yosekiritsu_text) {",
											"    \t//check the client.yosekiritsu_text whether number or string",
											"    \tpm.test(\"success response: client.yosekiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.client.yosekiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.id",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.id) {",
											"    \t//check the crawl.id whether number or string",
											"    \tpm.test(\"success response: crawl.id is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.id)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.name) {",
											"    \t//check the crawl.name whether number or string",
											"    \tpm.test(\"success response: crawl.name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.updated_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.updated_at) {",
											"    \t//check the crawl.updated_at whether number or string",
											"    \tpm.test(\"success response: crawl.updated_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.updated_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.update_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.update_user) {",
											"    \t//check the crawl.update_user whether number or string",
											"    \tpm.test(\"success response: crawl.update_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.update_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.created_at",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.created_at) {",
											"    \t//check the crawl.created_at whether number or string",
											"    \tpm.test(\"success response: crawl.created_at is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.created_at)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.create_user",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.create_user) {",
											"    \t//check the crawl.create_user whether number or string",
											"    \tpm.test(\"success response: crawl.create_user is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.create_user)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.delete_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.delete_flg) {",
											"    \t//check the crawl.delete_flg whether number or string",
											"    \tpm.test(\"success response: crawl.delete_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.delete_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.type) {",
											"    \t//check the crawl.type whether number or string",
											"    \tpm.test(\"success response: crawl.type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media) {",
											"    \t//check the crawl.media whether number or string",
											"    \tpm.test(\"success response: crawl.media is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media_text) {",
											"    \t//check the crawl.media_text whether number or string",
											"    \tpm.test(\"success response: crawl.media_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.media_link",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.media_link) {",
											"    \t//check the crawl.media_link whether number or string",
											"    \tpm.test(\"success response: crawl.media_link is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.media_link)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.published",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.published) {",
											"    \t//check the crawl.published whether number or string",
											"    \tpm.test(\"success response: crawl.published is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.published)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.new_flg",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.new_flg) {",
											"    \t//check the crawl.new_flg whether number or string",
											"    \tpm.test(\"success response: crawl.new_flg is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.new_flg)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price) {",
											"    \t//check the crawl.price whether number or string",
											"    \tpm.test(\"success response: crawl.price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price_int",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price_int) {",
											"    \t//check the crawl.price_int whether number or string",
											"    \tpm.test(\"success response: crawl.price_int is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price_int)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.most_price",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.most_price) {",
											"    \t//check the crawl.most_price whether number or string",
											"    \tpm.test(\"success response: crawl.most_price is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.most_price)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.address) {",
											"    \t//check the crawl.address whether number or string",
											"    \tpm.test(\"success response: crawl.address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.sale_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.sale_house_num) {",
											"    \t//check the crawl.sale_house_num whether number or string",
											"    \tpm.test(\"success response: crawl.sale_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.sale_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.total_house_num",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.total_house_num) {",
											"    \t//check the crawl.total_house_num whether number or string",
											"    \tpm.test(\"success response: crawl.total_house_num is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.total_house_num)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.access",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.access) {",
											"    \t//check the crawl.access whether number or string",
											"    \tpm.test(\"success response: crawl.access is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.access)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.access_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.access_time) {",
											"    \t//check the crawl.access_time whether number or string",
											"    \tpm.test(\"success response: crawl.access_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.access_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.madori",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.madori) {",
											"    \t//check the crawl.madori whether number or string",
											"    \tpm.test(\"success response: crawl.madori is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.madori)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.number_rooms",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.number_rooms) {",
											"    \t//check the crawl.number_rooms whether number or string",
											"    \tpm.test(\"success response: crawl.number_rooms is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.number_rooms)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.complete_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.complete_time) {",
											"    \t//check the crawl.complete_time whether number or string",
											"    \tpm.test(\"success response: crawl.complete_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.complete_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kouzou_kouhou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kouzou_kouhou) {",
											"    \t//check the crawl.kouzou_kouhou whether number or string",
											"    \tpm.test(\"success response: crawl.kouzou_kouhou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kouzou_kouhou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.image1",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.image1) {",
											"    \t//check the crawl.image1 whether number or string",
											"    \tpm.test(\"success response: crawl.image1 is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.image1)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setsubi",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setsubi) {",
											"    \t//check the crawl.setsubi whether number or string",
											"    \tpm.test(\"success response: crawl.setsubi is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setsubi)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.limitation",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.limitation) {",
											"    \t//check the crawl.limitation whether number or string",
											"    \tpm.test(\"success response: crawl.limitation is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.limitation)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.memo",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.memo) {",
											"    \t//check the crawl.memo whether number or string",
											"    \tpm.test(\"success response: crawl.memo is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.memo)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.shidoufutan",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.shidoufutan) {",
											"    \t//check the crawl.shidoufutan whether number or string",
											"    \tpm.test(\"success response: crawl.shidoufutan is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.shidoufutan)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.reform_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.reform_history) {",
											"    \t//check the crawl.reform_history whether number or string",
											"    \tpm.test(\"success response: crawl.reform_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.reform_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.renovation_history",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.renovation_history) {",
											"    \t//check the crawl.renovation_history whether number or string",
											"    \tpm.test(\"success response: crawl.renovation_history is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.renovation_history)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.parking",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.parking) {",
											"    \t//check the crawl.parking whether number or string",
											"    \tpm.test(\"success response: crawl.parking is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.parking)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_kouzou",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_kouzou) {",
											"    \t//check the crawl.building_kouzou whether number or string",
											"    \tpm.test(\"success response: crawl.building_kouzou is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_kouzou)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.landright",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.landright) {",
											"    \t//check the crawl.landright whether number or string",
											"    \tpm.test(\"success response: crawl.landright is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.landright)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.landyouto",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.landyouto) {",
											"    \t//check the crawl.landyouto whether number or string",
											"    \tpm.test(\"success response: crawl.landyouto is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.landyouto)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setsudou_status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setsudou_status) {",
											"    \t//check the crawl.setsudou_status whether number or string",
											"    \tpm.test(\"success response: crawl.setsudou_status is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setsudou_status)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.coverage_ratio_floor_area_ratio",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.coverage_ratio_floor_area_ratio) {",
											"    \t//check the crawl.coverage_ratio_floor_area_ratio whether number or string",
											"    \tpm.test(\"success response: crawl.coverage_ratio_floor_area_ratio is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.coverage_ratio_floor_area_ratio)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.chimoku",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.chimoku) {",
											"    \t//check the crawl.chimoku whether number or string",
											"    \tpm.test(\"success response: crawl.chimoku is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.chimoku)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.chisei",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.chisei) {",
											"    \t//check the crawl.chisei whether number or string",
											"    \tpm.test(\"success response: crawl.chisei is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.chisei)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.setback",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.setback) {",
											"    \t//check the crawl.setback whether number or string",
											"    \tpm.test(\"success response: crawl.setback is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.setback)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kenchiku_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kenchiku_number) {",
											"    \t//check the crawl.kenchiku_number whether number or string",
											"    \tpm.test(\"success response: crawl.kenchiku_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kenchiku_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.current_state",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.current_state) {",
											"    \t//check the crawl.current_state whether number or string",
											"    \tpm.test(\"success response: crawl.current_state is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.current_state)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.entering_time",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.entering_time) {",
											"    \t//check the crawl.entering_time whether number or string",
											"    \tpm.test(\"success response: crawl.entering_time is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.entering_time)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.store_name",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.store_name) {",
											"    \t//check the crawl.store_name whether number or string",
											"    \tpm.test(\"success response: crawl.store_name is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.store_name)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.trade_aspect_type",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.trade_aspect_type) {",
											"    \t//check the crawl.trade_aspect_type whether number or string",
											"    \tpm.test(\"success response: crawl.trade_aspect_type is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.trade_aspect_type)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.realestate_registration_number",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.realestate_registration_number) {",
											"    \t//check the crawl.realestate_registration_number whether number or string",
											"    \tpm.test(\"success response: crawl.realestate_registration_number is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.realestate_registration_number)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.store_address",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.store_address) {",
											"    \t//check the crawl.store_address whether number or string",
											"    \tpm.test(\"success response: crawl.store_address is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.store_address)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.release_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.release_date) {",
											"    \t//check the crawl.release_date whether number or string",
											"    \tpm.test(\"success response: crawl.release_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.release_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.nextmodify_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.nextmodify_date) {",
											"    \t//check the crawl.nextmodify_date whether number or string",
											"    \tpm.test(\"success response: crawl.nextmodify_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.nextmodify_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.updated_date",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.updated_date) {",
											"    \t//check the crawl.updated_date whether number or string",
											"    \tpm.test(\"success response: crawl.updated_date is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.updated_date)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.all_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.all_text) {",
											"    \t//check the crawl.all_text whether number or string",
											"    \tpm.test(\"success response: crawl.all_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.all_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.new_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.new_label) {",
											"    \t//check the crawl.new_label whether number or string",
											"    \tpm.test(\"success response: crawl.new_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.new_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.status_label",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.status_label) {",
											"    \t//check the crawl.status_label whether number or string",
											"    \tpm.test(\"success response: crawl.status_label is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.status_label)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.status",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.status) {",
											"    \t//check the crawl.status whether number or string",
											"    \tpm.test(\"success response: crawl.status is Number\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.status)).to.equal(true);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.price_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.price_text) {",
											"    \t//check the crawl.price_text whether number or string",
											"    \tpm.test(\"success response: crawl.price_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.price_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.land_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.land_area) {",
											"    \t//check the crawl.land_area whether number or string",
											"    \tpm.test(\"success response: crawl.land_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.land_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.land_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.land_area_text) {",
											"    \t//check the crawl.land_area_text whether number or string",
											"    \tpm.test(\"success response: crawl.land_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.land_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_area",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_area) {",
											"    \t//check the crawl.building_area whether number or string",
											"    \tpm.test(\"success response: crawl.building_area is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_area)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.building_area_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.building_area_text) {",
											"    \t//check the crawl.building_area_text whether number or string",
											"    \tpm.test(\"success response: crawl.building_area_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.building_area_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.kenpeiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.kenpeiritsu_text) {",
											"    \t//check the crawl.kenpeiritsu_text whether number or string",
											"    \tpm.test(\"success response: crawl.kenpeiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.kenpeiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SuccessCase: ResponseValidation FormatCkeck: crawl.yosekiritsu_text",
							"event": [
								{
									"script": {
										"id": 0,
										"type": "text/javascript",
										"exec": [
											"if (1 < request.data.length){",
											"    tests[\"RequestBody: \"+ request.data ] = true;",
											"} else {",
											"    tests[\"RequestBody: empty\" ] = true;",
											"}",
											"",
											"if (responseCode.code != 200) {",
											"    tests[\"Response: \" + responseBody] = false;",
											"    tests[\"response failed \"] = false;",
											"    ",
											"} else {",
											"    tests[\"Response: \" + responseBody] = true;",
											"    tests[\"response returned successfully\"] = true;",
											"    var jsondata = JSON.parse(responseBody);",
											"    if(null !== jsondata.crawl.yosekiritsu_text) {",
											"    \t//check the crawl.yosekiritsu_text whether number or string",
											"    \tpm.test(\"success response: crawl.yosekiritsu_text is String\", function() {",
											"    \t\tpm.expect(Number.isInteger(jsondata.crawl.yosekiritsu_text)).to.equal(false);",
											"    \t});",
											"    }",
											"}",
											"",
											"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
										]
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{TSTROOT}}property/{{ID_2}}",
									"host": [
										"{{TSTROOT}}property"
									],
									"path": [
										"{{ID_2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SuccessCase",
					"event": [
						{
							"script": {
								"id": 0,
								"type": "text/javascript",
								"exec": [
									"if (1 < request.data.length){",
									"    tests[\"RequestBody: \"+ request.data ] = true;",
									"} else {",
									"    tests[\"RequestBody: empty\" ] = true;",
									"}",
									"",
									"if (responseCode.code != 200) {",
									"    tests[\"Response: \" + responseBody] = false;",
									"    tests[\"response failed \"] = false;",
									"    ",
									"} else {",
									"    tests[\"Response: \" + responseBody] = true;",
									"    tests[\"response returned successfully\"] = true;",
									"}",
									"",
									"tests[\"status = \" + responseCode.code] = responseCode.code === 200;"
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TSTROOT}}property/{{ID_2}}",
							"host": [
								"{{TSTROOT}}property"
							],
							"path": [
								"{{ID_2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}