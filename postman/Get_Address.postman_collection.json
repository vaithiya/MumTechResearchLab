{
	"info": {
		"_postman_id": "c7e79343-5c28-436b-b861-fb1f11fc2bf3",
		"name": "Get_Address",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Local",
			"item": [
				{
					"name": "GetByParam: city_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_name).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: town_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?town_cd=11010002",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: postal_code",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: pref_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTLCL}}address?pref_cd=1",
											"host": [
												"{{CLIENTLCL}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success case: pref code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50ba8e65-3de5-418b-8811-dc3e9d12370a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTLCL}}address?pref_cd=1",
							"host": [
								"{{CLIENTLCL}}address"
							],
							"query": [
								{
									"key": "pref_cd",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case:city code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a543ea-d7b5-4e14-81d2-802693b4aa12",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTLCL}}address?city_cd=city_01101",
							"host": [
								"{{CLIENTLCL}}address"
							],
							"query": [
								{
									"key": "city_cd",
									"value": "city_01101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case:town code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6518be5a-7eff-43f5-b06c-bfb8200f8c2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTLCL}}address?town_cd=11010002",
							"host": [
								"{{CLIENTLCL}}address"
							],
							"query": [
								{
									"key": "town_cd",
									"value": "11010002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case: postal code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f6e3d4-7918-4723-8cd0-b57cea2d836e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTLCL}}address?postal_code=103-0025",
							"host": [
								"{{CLIENTLCL}}address"
							],
							"query": [
								{
									"key": "postal_code",
									"value": "103-0025"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST",
			"item": [
				{
					"name": "GetByParam: postal_code",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?postal_code=103-0025",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "postal_code",
													"value": "103-0025"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: pref_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?pref_cd=1",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "pref_cd",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: city_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?city_cd=city_01101",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "city_cd",
													"value": "city_01101"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetByParam: town_cd",
					"item": [
						{
							"name": "responseValidation Required",
							"item": [
								{
									"name": "MandatoryCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether null or not",
													"pm.test(\"sucess response: pref_cd not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether null or not",
													"pm.test(\"sucess response: pref_name is not null\", function () {",
													"    pm.expect(jsondata.pref_cd).not.eql(null);",
													"});",
													"",
													"// check the pref_name whether empty or not",
													"if (null != jsondata.pref_name) {",
													"    pm.test(\"sucess response: pref_name is not empty\", function () {",
													"        pm.expect(jsondata.pref_name.trim()).not.eql(\"\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check city[] wether empty or not. ",
													"pm.test(\"Success response: city[] is not empty\", function () {",
													"    pm.expect(jsondata.city.length).not.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_cd wether null or not.",
													"        pm.test(\"sucess response: city[].city_cd not null\", function () {",
													"            pm.expect(jsondata.city[i].city_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // Check city[].city_name wether null or not.",
													"        pm.test(\"sucess response: city[].city_name not null\", function () {",
													"            pm.expect(jsondata.city[i].city_name).not.eql(null);",
													"        });",
													"        // check the city[i].city_name whether empty or not",
													"        if (null != jsondata.city[i].city_name) {",
													"            pm.test(\"sucess response: city[].city_name is not empty\", function () {",
													"                pm.expect(jsondata.city[i].city_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// Check town[] wether empty or not. ",
													"pm.test(\"Success response: town[] is not empty\", function () {",
													"    pm.expect(jsondata.town.length).not.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_cd wether null or not.",
													"        pm.test(\"sucess response: town[].town_cd not null\", function () {",
													"            pm.expect(jsondata.town[i].town_cd).not.eql(null);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MandatoryCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // Check town[].town_name wether null or not.",
													"        pm.test(\"sucess response: town[].town_name not null\", function () {",
													"            pm.expect(jsondata.town[i].town_name).not.eql(null);",
													"        });",
													"        // check the town[i].town_name whether empty or not",
													"        if (null != jsondata.town[i].town_name) {",
													"            pm.test(\"sucess response: town[].town_name is not empty\", function () {",
													"                pm.expect(jsondata.town[i].town_name.trim()).not.eql(\"\");",
													"            });",
													"        }",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "responseValidation Type Check",
							"item": [
								{
									"name": "FormatCheck: pref_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_cd whether number or String",
													"pm.test(\"sucess response: pref_cd is a Number\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_cd)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: pref_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the pref_name whether number or String",
													"pm.test(\"sucess response: pref_name is a String\", function() {",
													"    pm.expect(Number.isInteger(jsondata.pref_name)).to.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the city[] whether is array or not ",
													"pm.test(\"sucess response: city[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.city)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_cd whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: city[].city_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.city.length != 0) {",
													"    for (var i = 0; i < jsondata.city.length; i++ ) {",
													"        // check the city.city_name whether number or String",
													"        pm.test(\"sucess response: city[\"+ i +\"].city_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.city[i].city_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check city[] wether empty or not. ",
													"    pm.test(\"Response: city[] is empty\", function () {",
													"        pm.expect(jsondata.city.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the town[] whether is array or not ",
													"pm.test(\"sucess response: town[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.town)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_cd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_cd whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_cd is a Number\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_cd)).to.equal(true);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: town[].town_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"if (jsondata.town.length != 0) {",
													"    for (var i = 0; i < jsondata.town.length; i++ ) {",
													"        // check the town.town_name whether number or String",
													"        pm.test(\"sucess response: town[\"+ i +\"].town_name is a String\", function() {",
													"            pm.expect(Number.isInteger(jsondata.town[i].town_name)).to.equal(false);",
													"        });",
													"    }",
													"} else {",
													"    // Check town[] wether empty or not. ",
													"    pm.test(\"Response: town[] is empty\", function () {",
													"        pm.expect(jsondata.town.length).not.eql(0);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"var jsondata = JSON.parse(responseBody);",
													"",
													"// check the jichome[] whether is array or not ",
													"pm.test(\"sucess response: jichome[] is a Array\", function() {",
													"    pm.expect(Array.isArray(jsondata.jichome)).to.equal(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatCheck: jichome[].jichome_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56604e70-9ff1-48ff-b51b-909e76142621",
												"exec": [
													"\tvar jsondata = JSON.parse(responseBody);",
													"",
													"\tif (jsondata.jichome.length != 0) {",
													"\t    for (var i = 0; i < jsondata.jichome.length; i++ ) {",
													"\t        // check the jichome.jichome_name whether number or String",
													"\t        pm.test(\"sucess response: jichome[\"+ i +\"].jichome_name is either String or null\", function() {",
													"\t            pm.expect(Number.isInteger(jsondata.jichome[i].jichome_name)).to.equal(false);",
													"\t            });",
													"\t    }",
													"\t} else {",
													"\t    // Check jichome[] wether empty or not. ",
													"\t    pm.test(\"Response: jichome[] is empty\", function () {",
													"\t        pm.expect(jsondata.jichome.length).is.eql(0);",
													"\t    });",
													"\t}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CLIENTTST}}address?town_cd=11010002",
											"host": [
												"{{CLIENTTST}}address"
											],
											"query": [
												{
													"key": "town_cd",
													"value": "11010002"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success case: postal code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56604e70-9ff1-48ff-b51b-909e76142621",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTTST}}address?postal_code=103-0025",
							"host": [
								"{{CLIENTTST}}address"
							],
							"query": [
								{
									"key": "postal_code",
									"value": "103-0025"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case: pref code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54ed64e7-ae65-4171-a787-7efd3bcd665e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTTST}}address?pref_cd=1",
							"host": [
								"{{CLIENTTST}}address"
							],
							"query": [
								{
									"key": "pref_cd",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case:city code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a543ea-d7b5-4e14-81d2-802693b4aa12",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTTST}}address?city_cd=city_01101",
							"host": [
								"{{CLIENTTST}}address"
							],
							"query": [
								{
									"key": "city_cd",
									"value": "city_01101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success case:town code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6518be5a-7eff-43f5-b06c-bfb8200f8c2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CLIENTTST}}address?town_cd=11010002",
							"host": [
								"{{CLIENTTST}}address"
							],
							"query": [
								{
									"key": "town_cd",
									"value": "11010002"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}